/* Generated By:JavaCC: Do not edit this line. TestTokenManager.java */
package jecoli.jUnitsTests.parser;
import jecoli.jUnitsTests.BitFlipMutationTest;
import jecoli.jUnitsTests.CellularGeneticAlgorithmTest;
import jecoli.jUnitsTests.CutAndSpliceCrossoverTest;
import jecoli.jUnitsTests.DifferentialEvolutionAlgorithmTest;
import jecoli.jUnitsTests.EvolutionaryAlgorithmTest;
import jecoli.jUnitsTests.GaussianPerturbationMutationTest;
import jecoli.jUnitsTests.ITest;
import jecoli.jUnitsTests.IntegerAddMutationTest;
import jecoli.jUnitsTests.LinearGenomeGrowMutationTest;
import jecoli.jUnitsTests.LinearGenomeRandomMutationTest;
import jecoli.jUnitsTests.LinearGenomeShrinkMutationTest;
import jecoli.jUnitsTests.NSGAIIAlgorithmTest;
import jecoli.jUnitsTests.OnePointCrossoverTest;
import jecoli.jUnitsTests.RouletteWheelSelectionTest;
import jecoli.jUnitsTests.SPEA2AlgorithmTest;
import jecoli.jUnitsTests.SetGrowthMutationTest;
import jecoli.jUnitsTests.SetRandomMutationTest;
import jecoli.jUnitsTests.SetShrinkMutationTest;
import jecoli.jUnitsTests.SimulatedAnnealingTest;
import jecoli.jUnitsTests.TournamentSelectionTest;
import jecoli.jUnitsTests.TwoPointCrossoverTest;
import java.util.ArrayList;
import java.util.TreeSet;
import jecoli.algorithm.components.representation.linear.ILinearRepresentation;
import jecoli.algorithm.components.representation.linear.LinearRepresentation;
import jecoli.algorithm.components.representation.set.SetRepresentation;
import jecoli.algorithm.components.solution.ISolution;
import jecoli.algorithm.components.solution.Solution;

/** Token Manager. */
public class TestTokenManager implements TestConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x2000L) != 0L)
         {
            jjmatchedKind = 69;
            return 2;
         }
         if ((active0 & 0x200000000000L) != 0L)
            return 17;
         if ((active0 & 0x800000004000L) != 0L)
         {
            jjmatchedKind = 69;
            return 6;
         }
         if ((active0 & 0xffff5fbf3fdc07e0L) != 0L || (active1 & 0x1fL) != 0L)
         {
            jjmatchedKind = 69;
            return 17;
         }
         return -1;
      case 1:
         if ((active0 & 0x4000L) != 0L)
         {
            jjmatchedKind = 69;
            jjmatchedPos = 1;
            return 5;
         }
         if ((active0 & 0x4000000L) != 0L)
            return 17;
         if ((active0 & 0x2000L) != 0L)
         {
            jjmatchedKind = 69;
            jjmatchedPos = 1;
            return 1;
         }
         if ((active0 & 0xffffdfbf3bdc07e0L) != 0L || (active1 & 0x1fL) != 0L)
         {
            jjmatchedKind = 69;
            jjmatchedPos = 1;
            return 17;
         }
         return -1;
      case 2:
         if ((active0 & 0x4000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 69;
               jjmatchedPos = 2;
            }
            return 4;
         }
         if ((active0 & 0x700001009880000L) != 0L)
            return 17;
         if ((active0 & 0x2000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 69;
               jjmatchedPos = 2;
            }
            return 18;
         }
         if ((active0 & 0xf8ffdfaf325407e0L) != 0L || (active1 & 0x1fL) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 69;
               jjmatchedPos = 2;
            }
            return 17;
         }
         return -1;
      case 3:
         if ((active0 & 0xffffdfae321007e0L) != 0L || (active1 & 0x1fL) != 0L)
         {
            jjmatchedKind = 69;
            jjmatchedPos = 3;
            return 17;
         }
         if ((active0 & 0x4000L) != 0L)
         {
            jjmatchedKind = 69;
            jjmatchedPos = 3;
            return 18;
         }
         if ((active0 & 0x100442000L) != 0L)
            return 17;
         return -1;
      case 4:
         if ((active1 & 0x8L) != 0L)
         {
            jjmatchedKind = 69;
            jjmatchedPos = 4;
            return 19;
         }
         if ((active0 & 0xffffdfa6320007e0L) != 0L || (active1 & 0x17L) != 0L)
         {
            jjmatchedKind = 69;
            jjmatchedPos = 4;
            return 17;
         }
         if ((active0 & 0x800104000L) != 0L)
            return 17;
         return -1;
      case 5:
         if ((active0 & 0xffffdfa6200007e0L) != 0L || (active1 & 0x17L) != 0L)
         {
            jjmatchedKind = 69;
            jjmatchedPos = 5;
            return 17;
         }
         if ((active0 & 0x12000000L) != 0L)
            return 17;
         if ((active1 & 0x8L) != 0L)
         {
            jjmatchedKind = 69;
            jjmatchedPos = 5;
            return 19;
         }
         return -1;
      case 6:
         if ((active1 & 0x8L) != 0L)
         {
            if (jjmatchedPos != 6)
            {
               jjmatchedKind = 69;
               jjmatchedPos = 6;
            }
            return 19;
         }
         if ((active0 & 0xff7f1f06200007e0L) != 0L || (active1 & 0x17L) != 0L)
         {
            if (jjmatchedPos != 6)
            {
               jjmatchedKind = 69;
               jjmatchedPos = 6;
            }
            return 17;
         }
         if ((active0 & 0x80c0a000000000L) != 0L)
            return 17;
         return -1;
      case 7:
         if ((active1 & 0x8L) != 0L)
         {
            if (jjmatchedPos != 7)
            {
               jjmatchedKind = 69;
               jjmatchedPos = 7;
            }
            return 19;
         }
         if ((active0 & 0xffff1e06200006c0L) != 0L || (active1 & 0x17L) != 0L)
         {
            if (jjmatchedPos != 7)
            {
               jjmatchedKind = 69;
               jjmatchedPos = 7;
            }
            return 17;
         }
         if ((active0 & 0x10000000120L) != 0L)
            return 17;
         return -1;
      case 8:
         if ((active0 & 0xffff1f06200006c0L) != 0L || (active1 & 0x17L) != 0L)
         {
            jjmatchedKind = 69;
            jjmatchedPos = 8;
            return 17;
         }
         if ((active1 & 0x8L) != 0L)
         {
            jjmatchedKind = 69;
            jjmatchedPos = 8;
            return 19;
         }
         return -1;
      case 9:
         if ((active1 & 0x8L) != 0L)
         {
            jjmatchedKind = 69;
            jjmatchedPos = 9;
            return 19;
         }
         if ((active0 & 0xffff190620000680L) != 0L || (active1 & 0x17L) != 0L)
         {
            jjmatchedKind = 69;
            jjmatchedPos = 9;
            return 17;
         }
         if ((active0 & 0x60000000040L) != 0L)
            return 17;
         return -1;
      case 10:
         if ((active1 & 0x8L) != 0L)
         {
            jjmatchedKind = 69;
            jjmatchedPos = 10;
            return 19;
         }
         if ((active0 & 0xffff190600000680L) != 0L || (active1 & 0x17L) != 0L)
         {
            jjmatchedKind = 69;
            jjmatchedPos = 10;
            return 17;
         }
         if ((active0 & 0x20000000L) != 0L)
            return 17;
         return -1;
      case 11:
         if ((active1 & 0x8L) != 0L)
         {
            jjmatchedKind = 69;
            jjmatchedPos = 11;
            return 19;
         }
         if ((active0 & 0xffff180600000680L) != 0L || (active1 & 0x17L) != 0L)
         {
            jjmatchedKind = 69;
            jjmatchedPos = 11;
            return 17;
         }
         if ((active0 & 0x10000000000L) != 0L)
            return 17;
         return -1;
      case 12:
         if ((active0 & 0xffff180600000680L) != 0L || (active1 & 0x17L) != 0L)
         {
            jjmatchedKind = 69;
            jjmatchedPos = 12;
            return 17;
         }
         if ((active1 & 0x8L) != 0L)
         {
            jjmatchedKind = 69;
            jjmatchedPos = 12;
            return 19;
         }
         return -1;
      case 13:
         if ((active1 & 0x8L) != 0L)
            return 19;
         if ((active0 & 0x200000000L) != 0L)
            return 17;
         if ((active0 & 0xffff180400000680L) != 0L || (active1 & 0x17L) != 0L)
         {
            jjmatchedKind = 69;
            jjmatchedPos = 13;
            return 17;
         }
         return -1;
      case 14:
         if ((active0 & 0x4002000000000000L) != 0L)
            return 17;
         if ((active0 & 0xbffd180400000680L) != 0L || (active1 & 0x17L) != 0L)
         {
            jjmatchedKind = 69;
            jjmatchedPos = 14;
            return 17;
         }
         return -1;
      case 15:
         if ((active0 & 0x200L) != 0L)
            return 17;
         if ((active0 & 0xbffd180400000480L) != 0L || (active1 & 0x17L) != 0L)
         {
            jjmatchedKind = 69;
            jjmatchedPos = 15;
            return 17;
         }
         return -1;
      case 16:
         if ((active0 & 0x8700000000000080L) != 0L || (active1 & 0x1L) != 0L)
            return 17;
         if ((active0 & 0x38fd180400000400L) != 0L || (active1 & 0x16L) != 0L)
         {
            jjmatchedKind = 69;
            jjmatchedPos = 16;
            return 17;
         }
         return -1;
      case 17:
         if ((active0 & 0x387d180400000400L) != 0L || (active1 & 0x12L) != 0L)
         {
            jjmatchedKind = 69;
            jjmatchedPos = 17;
            return 17;
         }
         if ((active0 & 0x80000000000000L) != 0L || (active1 & 0x4L) != 0L)
            return 17;
         return -1;
      case 18:
         if ((active0 & 0x387d180000000400L) != 0L || (active1 & 0x2L) != 0L)
         {
            jjmatchedKind = 69;
            jjmatchedPos = 18;
            return 17;
         }
         if ((active0 & 0x400000000L) != 0L || (active1 & 0x10L) != 0L)
            return 17;
         return -1;
      case 19:
         if ((active0 & 0x387d180000000400L) != 0L || (active1 & 0x2L) != 0L)
         {
            jjmatchedKind = 69;
            jjmatchedPos = 19;
            return 17;
         }
         return -1;
      case 20:
         if ((active0 & 0x3868180000000400L) != 0L || (active1 & 0x2L) != 0L)
         {
            jjmatchedKind = 69;
            jjmatchedPos = 20;
            return 17;
         }
         if ((active0 & 0x15000000000000L) != 0L)
            return 17;
         return -1;
      case 21:
         if ((active0 & 0x3868180000000000L) != 0L)
         {
            jjmatchedKind = 69;
            jjmatchedPos = 21;
            return 17;
         }
         if ((active0 & 0x400L) != 0L || (active1 & 0x2L) != 0L)
            return 17;
         return -1;
      case 22:
         if ((active0 & 0x3868180000000000L) != 0L)
         {
            jjmatchedKind = 69;
            jjmatchedPos = 22;
            return 17;
         }
         return -1;
      case 23:
         if ((active0 & 0x3060180000000000L) != 0L)
         {
            jjmatchedKind = 69;
            jjmatchedPos = 23;
            return 17;
         }
         if ((active0 & 0x808000000000000L) != 0L)
            return 17;
         return -1;
      case 24:
         if ((active0 & 0x80000000000L) != 0L)
            return 17;
         if ((active0 & 0x3060100000000000L) != 0L)
         {
            jjmatchedKind = 69;
            jjmatchedPos = 24;
            return 17;
         }
         return -1;
      case 25:
         if ((active0 & 0x3000000000000000L) != 0L)
            return 17;
         if ((active0 & 0x60100000000000L) != 0L)
         {
            jjmatchedKind = 69;
            jjmatchedPos = 25;
            return 17;
         }
         return -1;
      case 26:
         if ((active0 & 0x60100000000000L) != 0L)
         {
            jjmatchedKind = 69;
            jjmatchedPos = 26;
            return 17;
         }
         return -1;
      case 27:
         if ((active0 & 0x40000000000000L) != 0L)
            return 17;
         if ((active0 & 0x20100000000000L) != 0L)
         {
            jjmatchedKind = 69;
            jjmatchedPos = 27;
            return 17;
         }
         return -1;
      case 28:
         if ((active0 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 69;
            jjmatchedPos = 28;
            return 17;
         }
         if ((active0 & 0x100000000000L) != 0L)
            return 17;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 40:
         return jjStopAtPos(0, 30);
      case 41:
         return jjStopAtPos(0, 31);
      case 58:
         return jjStopAtPos(0, 15);
      case 59:
         return jjStopAtPos(0, 21);
      case 65:
         return jjMoveStringLiteralDfa1_0(0x800000000L, 0x0L);
      case 66:
         return jjMoveStringLiteralDfa1_0(0x2002000000000L, 0x0L);
      case 67:
         return jjMoveStringLiteralDfa1_0(0x18000000000000L, 0x0L);
      case 68:
         return jjMoveStringLiteralDfa1_0(0x20000000000000L, 0x0L);
      case 69:
         return jjMoveStringLiteralDfa1_0(0x4000000000200L, 0x0L);
      case 71:
         return jjMoveStringLiteralDfa1_0(0x40000000000000L, 0x0L);
      case 73:
         return jjMoveStringLiteralDfa1_0(0x81008000000080L, 0x0L);
      case 76:
         return jjMoveStringLiteralDfa1_0(0x3800000000000000L, 0x0L);
      case 77:
         return jjMoveStringLiteralDfa1_0(0x400000000000L, 0x0L);
      case 78:
         return jjMoveStringLiteralDfa1_0(0x4000000000000000L, 0x0L);
      case 79:
         return jjMoveStringLiteralDfa1_0(0x8000000000000020L, 0x0L);
      case 82:
         return jjMoveStringLiteralDfa1_0(0x40L, 0x2L);
      case 83:
         return jjMoveStringLiteralDfa1_0(0x700011000000500L, 0xcL);
      case 84:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x11L);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x80000L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x4800000L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x18000000L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x800000004000L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x200000000L, 0x0L);
      case 107:
         return jjStartNfaWithStates_0(0, 45, 17);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x20000000000L, 0x0L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x500000L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x180400000000L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x1040000L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x2000000L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x120000000L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x2000L, 0x0L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x40000000000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 11);
      case 125:
         return jjStopAtPos(0, 12);
      default :
         return jjMoveNfa_0(3, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 76:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000000L, active1, 0L);
      case 80:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x8L);
      case 83:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x40400000004040L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x708001002000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x3822800100900000L, active1, 0x4L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x8080008008000080L, active1, 0L);
      case 111:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(1, 26, 17);
         return jjMoveStringLiteralDfa2_0(active0, 0x32001000100L, active1, 0x12L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000420L, active1, 0L);
      case 113:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x800002000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x10180420400000L, active1, 0L);
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000000L, active1, 0L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x200L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x8L);
      case 71:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000000000L, active1, 0L);
      case 77:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000L, active1, 0L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000L, active1, 0L);
      case 100:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(2, 19, 17);
         else if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(2, 27, 17);
         break;
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000000420L, active1, 0L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000080L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x8010000404100L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x180400000000L, active1, 0x4L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x3800000000100040L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x4002000000000L, active1, 0x1L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000200L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000L, active1, 0L);
      case 116:
         if ((active0 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x792808002000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000010042000L, active1, 0x12L);
      case 118:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(2, 23, 17);
         break;
      case 119:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(2, 24, 17);
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000000L, active1, 0L);
      case 120:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000000L, active1, 0L);
      case 122:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa4_0(active0, 0x4010000000000000L, active1, 0x8L);
      case 70:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000000L, active1, 0L);
      case 71:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000000000L, active1, 0L);
      case 80:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000000000L, active1, 0x1L);
      case 82:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000000000L, active1, 0L);
      case 83:
         return jjMoveStringLiteralDfa4_0(active0, 0x100400000000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0xa10000000L, active1, 0L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x180400000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x400L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa4_0(active0, 0x40L, active1, 0L);
      case 101:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(3, 13, 17);
         else if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(3, 32, 17);
         return jjMoveStringLiteralDfa4_0(active0, 0x3880068000000200L, active1, 0L);
      case 102:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0xc002000000000L, active1, 0x2L);
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x1800000000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x20L, active1, 0x10L);
      case 115:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(3, 18, 17);
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000004000L, active1, 0L);
      case 116:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(3, 22, 17);
         return jjMoveStringLiteralDfa4_0(active0, 0x20000080L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x10002100100L, active1, 0x4L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1);
      return 4;
   }
   switch(curChar)
   {
      case 50:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x8L);
      case 73:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000000000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x3c00000000000020L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x200L, active1, 0L);
      case 101:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(4, 14, 17);
         return jjMoveStringLiteralDfa5_0(active0, 0x21982400000000L, active1, 0x2L);
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0x80008000000000L, active1, 0L);
      case 104:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000480L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000010000000L, active1, 0x4L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000000000L, active1, 0x10L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000000040L, active1, 0x1L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x200060022000000L, active1, 0L);
      case 115:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(4, 20, 17);
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000100L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0xc000000000000L, active1, 0L);
      case 120:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000000L, active1, 0L);
      case 121:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(4, 35, 17);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1);
      return 5;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x8L);
      case 66:
         return jjMoveStringLiteralDfa6_0(active0, 0x60000000000L, active1, 0L);
      case 73:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000000000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x1002020000080L, active1, 0x14L);
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa6_0(active0, 0x80008000000000L, active1, 0L);
      case 102:
         return jjMoveStringLiteralDfa6_0(active0, 0x400L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x8042010200000100L, active1, 0x1L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000000000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0x40L, active1, 0L);
      case 110:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(5, 25, 17);
         return jjMoveStringLiteralDfa6_0(active0, 0x400000000000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x3920180400000000L, active1, 0L);
      case 115:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(5, 28, 17);
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000000220L, active1, 0x2L);
      case 122:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1);
      return 6;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000000000000L, active1, 0L);
      case 71:
         return jjMoveStringLiteralDfa7_0(active0, 0x3800000000000000L, active1, 0L);
      case 79:
         return jjMoveStringLiteralDfa7_0(active0, 0x180400000000L, active1, 0L);
      case 83:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000000000040L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x48000000000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x20000000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000000000000L, active1, 0L);
      case 101:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 46, 17);
         return jjMoveStringLiteralDfa7_0(active0, 0x20000000000200L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x104000000000400L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa7_0(active0, 0x80L, active1, 0x8L);
      case 109:
         return jjMoveStringLiteralDfa7_0(active0, 0x200000000L, active1, 0x10L);
      case 110:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 37, 17);
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000000000000L, active1, 0x1L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x70000000120L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000000000L, active1, 0L);
      case 114:
         if ((active0 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 39;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0x81000000000000L, active1, 0L);
      case 115:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 47, 17);
         break;
      case 116:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x6L);
      case 119:
         return jjMoveStringLiteralDfa7_0(active0, 0x200000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1);
      return 7;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa8_0(active0, 0x80000000000000L, active1, 0L);
      case 77:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000000000000L, active1, 0L);
      case 80:
         return jjMoveStringLiteralDfa8_0(active0, 0x80L, active1, 0L);
      case 82:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000000000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x400L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa8_0(active0, 0x200L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa8_0(active0, 0x3800000000000040L, active1, 0x16L);
      case 102:
         return jjMoveStringLiteralDfa8_0(active0, 0x180400000000L, active1, 0L);
      case 103:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x8L);
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x200000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa8_0(active0, 0x4000000000000000L, active1, 0L);
      case 110:
         if ((active0 & 0x100L) != 0L)
         {
            jjmatchedKind = 8;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0x160010000000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x404000000000000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa8_0(active0, 0x10000000000000L, active1, 0L);
      case 114:
         if ((active0 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(7, 5, 17);
         return jjMoveStringLiteralDfa8_0(active0, 0x8000000000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa8_0(active0, 0x8200000020000000L, active1, 0x1L);
      case 117:
         return jjMoveStringLiteralDfa8_0(active0, 0x60000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(6, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1);
      return 8;
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa9_0(active0, 0x8000000000000000L, active1, 0x1L);
      case 71:
         return jjMoveStringLiteralDfa9_0(active0, 0x8000400000000L, active1, 0L);
      case 79:
         return jjMoveStringLiteralDfa9_0(active0, 0x400L, active1, 0L);
      case 80:
         return jjMoveStringLiteralDfa9_0(active0, 0x40000000000000L, active1, 0L);
      case 83:
         return jjMoveStringLiteralDfa9_0(active0, 0x180000000200L, active1, 0L);
      case 84:
         return jjMoveStringLiteralDfa9_0(active0, 0x10000000000L, active1, 0L);
      case 87:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x2L);
      case 100:
         return jjMoveStringLiteralDfa9_0(active0, 0x80000000000000L, active1, 0x4L);
      case 101:
         return jjMoveStringLiteralDfa9_0(active0, 0x1000000000040L, active1, 0L);
      case 103:
         return jjMoveStringLiteralDfa9_0(active0, 0x4000000000000000L, active1, 0L);
      case 104:
         return jjMoveStringLiteralDfa9_0(active0, 0x200000000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x20000000L, active1, 0L);
      case 107:
         return jjMoveStringLiteralDfa9_0(active0, 0x100000000000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa9_0(active0, 0x10000000000000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa9_0(active0, 0x400000000000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa9_0(active0, 0x3804060000000000L, active1, 0x10L);
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0x80L, active1, 0x8L);
      case 116:
         return jjMoveStringLiteralDfa9_0(active0, 0x20000000000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa9_0(active0, 0x2000000000000L, active1, 0L);
      case 122:
         return jjMoveStringLiteralDfa9_0(active0, 0x200000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(7, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1);
      return 9;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x4L);
      case 77:
         return jjMoveStringLiteralDfa10_0(active0, 0x700000000000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0x4000200000000L, active1, 0L);
      case 100:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(9, 6, 17);
         else if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 41, 17);
         else if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 42, 17);
         return jjMoveStringLiteralDfa10_0(active0, 0x80000000000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa10_0(active0, 0x48000400000000L, active1, 0L);
      case 104:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x2L);
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0x30000000000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0x7800180020000200L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa10_0(active0, 0x1000000000480L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa10_0(active0, 0x8000000000000000L, active1, 0x9L);
      case 116:
         return jjMoveStringLiteralDfa10_0(active0, 0x2000000000000L, active1, 0x10L);
      case 121:
         return jjMoveStringLiteralDfa10_0(active0, 0x10000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(8, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, active1);
      return 10;
   }
   switch(curChar)
   {
      case 77:
         return jjMoveStringLiteralDfa11_0(active0, 0x80000000000000L, active1, 0L);
      case 83:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x10L);
      case 97:
         return jjMoveStringLiteralDfa11_0(active0, 0x22000000000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa11_0(active0, 0x10000000000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa11_0(active0, 0x400L, active1, 0x2L);
      case 105:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x8L);
      case 108:
         return jjMoveStringLiteralDfa11_0(active0, 0x180000000200L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa11_0(active0, 0x3800000000000000L, active1, 0L);
      case 110:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(10, 29, 17);
         return jjMoveStringLiteralDfa11_0(active0, 0x8000400000000L, active1, 0x4L);
      case 111:
         return jjMoveStringLiteralDfa11_0(active0, 0x8000000000000000L, active1, 0x1L);
      case 112:
         return jjMoveStringLiteralDfa11_0(active0, 0x10000000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa11_0(active0, 0x4045000000000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa11_0(active0, 0x200000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa11_0(active0, 0x700000000000080L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, active1);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(9, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, active1);
      return 11;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 40, 17);
         return jjMoveStringLiteralDfa12_0(active0, 0x3819000400000000L, active1, 0x12L);
      case 105:
         return jjMoveStringLiteralDfa12_0(active0, 0x4000000200000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa12_0(active0, 0x20000000000080L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x4L);
      case 114:
         return jjMoveStringLiteralDfa12_0(active0, 0x400L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa12_0(active0, 0x8000000000000000L, active1, 0x1L);
      case 116:
         return jjMoveStringLiteralDfa12_0(active0, 0x742000000000000L, active1, 0x8L);
      case 117:
         return jjMoveStringLiteralDfa12_0(active0, 0x80180000000200L, active1, 0L);
      case 121:
         return jjMoveStringLiteralDfa12_0(active0, 0x4000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, active1);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(10, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, active1);
      return 12;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa13_0(active0, 0x4000000000000L, active1, 0L);
      case 67:
         return jjMoveStringLiteralDfa13_0(active0, 0x10000000000000L, active1, 0L);
      case 69:
         return jjMoveStringLiteralDfa13_0(active0, 0x20000000000000L, active1, 0L);
      case 71:
         return jjMoveStringLiteralDfa13_0(active0, 0x800000000000000L, active1, 0L);
      case 82:
         return jjMoveStringLiteralDfa13_0(active0, 0x1000000000000000L, active1, 0L);
      case 83:
         return jjMoveStringLiteralDfa13_0(active0, 0x2000000000000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa13_0(active0, 0x700000000000480L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x4L);
      case 104:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x8L);
      case 105:
         return jjMoveStringLiteralDfa13_0(active0, 0x2000000000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x12L);
      case 111:
         return jjMoveStringLiteralDfa13_0(active0, 0x200000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa13_0(active0, 0x400000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa13_0(active0, 0x8001000000000000L, active1, 0x1L);
      case 116:
         return jjMoveStringLiteralDfa13_0(active0, 0x4088180000000200L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa13_0(active0, 0x40000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0, active1);
}
private int jjMoveStringLiteralDfa13_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(11, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, active1);
      return 13;
   }
   switch(curChar)
   {
      case 83:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x2L);
      case 97:
         return jjMoveStringLiteralDfa14_0(active0, 0x1080000400000000L, active1, 0x4L);
      case 101:
         return jjMoveStringLiteralDfa14_0(active0, 0x1000000000000L, active1, 0x10L);
      case 104:
         return jjMoveStringLiteralDfa14_0(active0, 0x6000000000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa14_0(active0, 0x8180000000200L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa14_0(active0, 0x4000000000000L, active1, 0L);
      case 109:
         if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(13, 67, 19);
         break;
      case 110:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(13, 33, 17);
         break;
      case 111:
         return jjMoveStringLiteralDfa14_0(active0, 0x8002000000000000L, active1, 0x1L);
      case 114:
         return jjMoveStringLiteralDfa14_0(active0, 0x850000000000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa14_0(active0, 0x700000000000480L, active1, 0L);
      case 118:
         return jjMoveStringLiteralDfa14_0(active0, 0x20000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0, active1);
}
private int jjMoveStringLiteralDfa14_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(12, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0, active1);
      return 14;
   }
   switch(curChar)
   {
      case 98:
         return jjMoveStringLiteralDfa15_0(active0, 0x40000000000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa15_0(active0, 0x8000000000000L, active1, 0x10L);
      case 101:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x2L);
      case 103:
         return jjMoveStringLiteralDfa15_0(active0, 0x4000000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa15_0(active0, 0x700000000000080L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x4L);
      case 109:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(14, 62, 17);
         break;
      case 110:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(14, 49, 17);
         return jjMoveStringLiteralDfa15_0(active0, 0x1001000000000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa15_0(active0, 0x830180000000600L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa15_0(active0, 0x2000000000000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa15_0(active0, 0x80000400000000L, active1, 0L);
      case 118:
         return jjMoveStringLiteralDfa15_0(active0, 0x8000000000000000L, active1, 0x1L);
      default :
         break;
   }
   return jjStartNfa_0(13, active0, active1);
}
private int jjMoveStringLiteralDfa15_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(13, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0, active1);
      return 15;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa16_0(active0, 0x8000000000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa16_0(active0, 0x40000000000000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa16_0(active0, 0x1000000000000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa16_0(active0, 0x8000000000000000L, active1, 0x1L);
      case 105:
         return jjMoveStringLiteralDfa16_0(active0, 0x2080000400000000L, active1, 0x4L);
      case 108:
         return jjMoveStringLiteralDfa16_0(active0, 0x20000000000000L, active1, 0x2L);
      case 110:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(15, 9, 17);
         return jjMoveStringLiteralDfa16_0(active0, 0x180000000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa16_0(active0, 0x704000000000080L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa16_0(active0, 0x400L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa16_0(active0, 0x10000000000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa16_0(active0, 0x1000000000000L, active1, 0x10L);
      case 119:
         return jjMoveStringLiteralDfa16_0(active0, 0x800000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(14, active0, active1);
}
private int jjMoveStringLiteralDfa16_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(14, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, active0, active1);
      return 16;
   }
   switch(curChar)
   {
      case 77:
         return jjMoveStringLiteralDfa17_0(active0, 0x800000000000000L, active1, 0L);
      case 86:
         return jjMoveStringLiteralDfa17_0(active0, 0x400L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa17_0(active0, 0x1000000000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa17_0(active0, 0L, active1, 0x2L);
      case 105:
         return jjMoveStringLiteralDfa17_0(active0, 0L, active1, 0x10L);
      case 108:
         return jjMoveStringLiteralDfa17_0(active0, 0x8000000000000L, active1, 0L);
      case 110:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(16, 7, 17);
         else if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(16, 56, 17);
         else if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(16, 57, 17);
         else if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(16, 58, 17);
         return jjMoveStringLiteralDfa17_0(active0, 0x2000000000000000L, active1, 0x4L);
      case 111:
         return jjMoveStringLiteralDfa17_0(active0, 0x1080000400000000L, active1, 0L);
      case 114:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(16, 63, 17);
         else if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(16, 64, 17);
         return jjMoveStringLiteralDfa17_0(active0, 0x4000000000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa17_0(active0, 0x10180000000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa17_0(active0, 0x40000000000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa17_0(active0, 0x20000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(15, active0, active1);
}
private int jjMoveStringLiteralDfa17_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(15, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, active0, active1);
      return 17;
   }
   switch(curChar)
   {
      case 80:
         return jjMoveStringLiteralDfa18_0(active0, 0x100000000000L, active1, 0L);
      case 84:
         return jjMoveStringLiteralDfa18_0(active0, 0x80000000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa18_0(active0, 0x400L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa18_0(active0, 0L, active1, 0x2L);
      case 103:
         if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(17, 66, 17);
         return jjMoveStringLiteralDfa18_0(active0, 0x8000000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa18_0(active0, 0x44000000000000L, active1, 0L);
      case 107:
         return jjMoveStringLiteralDfa18_0(active0, 0x2000000000000000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa18_0(active0, 0x1000000000000000L, active1, 0L);
      case 110:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(17, 55, 17);
         return jjMoveStringLiteralDfa18_0(active0, 0x400000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa18_0(active0, 0x10000000000000L, active1, 0x10L);
      case 116:
         return jjMoveStringLiteralDfa18_0(active0, 0x21000000000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa18_0(active0, 0x800000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(16, active0, active1);
}
private int jjMoveStringLiteralDfa18_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(16, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, active0, active1);
      return 18;
   }
   switch(curChar)
   {
      case 77:
         return jjMoveStringLiteralDfa19_0(active0, 0x3000000000000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa19_0(active0, 0x100000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa19_0(active0, 0x21000000000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa19_0(active0, 0x400L, active1, 0L);
      case 110:
         if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(18, 68, 17);
         break;
      case 111:
         return jjMoveStringLiteralDfa19_0(active0, 0x48080000000000L, active1, 0L);
      case 115:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(18, 34, 17);
         break;
      case 116:
         return jjMoveStringLiteralDfa19_0(active0, 0x804000000000000L, active1, 0x2L);
      case 118:
         return jjMoveStringLiteralDfa19_0(active0, 0x10000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(17, active0, active1);
}
private int jjMoveStringLiteralDfa19_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(17, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(18, active0, active1);
      return 19;
   }
   switch(curChar)
   {
      case 83:
         return jjMoveStringLiteralDfa20_0(active0, 0x80000000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa20_0(active0, 0x800000000000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa20_0(active0, 0x10000000000000L, active1, 0L);
      case 104:
         return jjMoveStringLiteralDfa20_0(active0, 0x4000000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa20_0(active0, 0L, active1, 0x2L);
      case 110:
         return jjMoveStringLiteralDfa20_0(active0, 0x40000000000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa20_0(active0, 0x21000000000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa20_0(active0, 0x8100000000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa20_0(active0, 0x3000000000000400L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(18, active0, active1);
}
private int jjMoveStringLiteralDfa20_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(18, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(19, active0, active1);
      return 20;
   }
   switch(curChar)
   {
      case 77:
         return jjMoveStringLiteralDfa21_0(active0, 0x40000000000000L, active1, 0L);
      case 84:
         return jjMoveStringLiteralDfa21_0(active0, 0x100000000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa21_0(active0, 0x80000000400L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa21_0(active0, 0x8000000000000L, active1, 0L);
      case 109:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(20, 50, 17);
         break;
      case 110:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(20, 48, 17);
         return jjMoveStringLiteralDfa21_0(active0, 0x20000000000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa21_0(active0, 0L, active1, 0x2L);
      case 114:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(20, 52, 17);
         break;
      case 116:
         return jjMoveStringLiteralDfa21_0(active0, 0x3800000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(19, active0, active1);
}
private int jjMoveStringLiteralDfa21_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(19, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(20, active0, active1);
      return 21;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa22_0(active0, 0x20000000000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa22_0(active0, 0x3000000000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa22_0(active0, 0x800000000000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa22_0(active0, 0x80000000000L, active1, 0L);
      case 110:
         if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(21, 65, 17);
         break;
      case 111:
         return jjMoveStringLiteralDfa22_0(active0, 0x100000000000L, active1, 0L);
      case 115:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(21, 10, 17);
         break;
      case 116:
         return jjMoveStringLiteralDfa22_0(active0, 0x8000000000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa22_0(active0, 0x40000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(20, active0, active1);
}
private int jjMoveStringLiteralDfa22_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(20, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(21, active0, 0L);
      return 22;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa23_0(active0, 0x80000000000L);
      case 104:
         return jjMoveStringLiteralDfa23_0(active0, 0x8000000000000L);
      case 108:
         return jjMoveStringLiteralDfa23_0(active0, 0x20000000000000L);
      case 111:
         return jjMoveStringLiteralDfa23_0(active0, 0x800000000000000L);
      case 116:
         return jjMoveStringLiteralDfa23_0(active0, 0x3040000000000000L);
      case 117:
         return jjMoveStringLiteralDfa23_0(active0, 0x100000000000L);
      default :
         break;
   }
   return jjStartNfa_0(21, active0, 0L);
}
private int jjMoveStringLiteralDfa23_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(21, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(22, active0, 0L);
      return 23;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa24_0(active0, 0x40000000000000L);
      case 99:
         return jjMoveStringLiteralDfa24_0(active0, 0x80000000000L);
      case 103:
         return jjMoveStringLiteralDfa24_0(active0, 0x20000000000000L);
      case 105:
         return jjMoveStringLiteralDfa24_0(active0, 0x3000000000000000L);
      case 109:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(23, 51, 17);
         break;
      case 110:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(23, 59, 17);
         break;
      case 114:
         return jjMoveStringLiteralDfa24_0(active0, 0x100000000000L);
      default :
         break;
   }
   return jjStartNfa_0(22, active0, 0L);
}
private int jjMoveStringLiteralDfa24_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(22, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(23, active0, 0L);
      return 24;
   }
   switch(curChar)
   {
      case 110:
         return jjMoveStringLiteralDfa25_0(active0, 0x100000000000L);
      case 111:
         return jjMoveStringLiteralDfa25_0(active0, 0x3020000000000000L);
      case 116:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(24, 43, 17);
         return jjMoveStringLiteralDfa25_0(active0, 0x40000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(23, active0, 0L);
}
private int jjMoveStringLiteralDfa25_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(23, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(24, active0, 0L);
      return 25;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa26_0(active0, 0x40000000000000L);
      case 109:
         return jjMoveStringLiteralDfa26_0(active0, 0x100000000000L);
      case 110:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(25, 60, 17);
         else if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(25, 61, 17);
         break;
      case 114:
         return jjMoveStringLiteralDfa26_0(active0, 0x20000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(24, active0, 0L);
}
private int jjMoveStringLiteralDfa26_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(24, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(25, active0, 0L);
      return 26;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa27_0(active0, 0x100000000000L);
      case 105:
         return jjMoveStringLiteralDfa27_0(active0, 0x20000000000000L);
      case 111:
         return jjMoveStringLiteralDfa27_0(active0, 0x40000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(25, active0, 0L);
}
private int jjMoveStringLiteralDfa27_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(25, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(26, active0, 0L);
      return 27;
   }
   switch(curChar)
   {
      case 110:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(27, 54, 17);
         return jjMoveStringLiteralDfa28_0(active0, 0x100000000000L);
      case 116:
         return jjMoveStringLiteralDfa28_0(active0, 0x20000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(26, active0, 0L);
}
private int jjMoveStringLiteralDfa28_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(26, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(27, active0, 0L);
      return 28;
   }
   switch(curChar)
   {
      case 104:
         return jjMoveStringLiteralDfa29_0(active0, 0x20000000000000L);
      case 116:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(28, 44, 17);
         break;
      default :
         break;
   }
   return jjStartNfa_0(27, active0, 0L);
}
private int jjMoveStringLiteralDfa29_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(27, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(28, active0, 0L);
      return 29;
   }
   switch(curChar)
   {
      case 109:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(29, 53, 17);
         break;
      default :
         break;
   }
   return jjStartNfa_0(28, active0, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 17;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 19:
               case 11:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 69)
                     kind = 69;
                  jjCheckNAddTwoStates(10, 11);
                  break;
               case 18:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 69)
                     kind = 69;
                  jjCheckNAddTwoStates(10, 11);
                  break;
               case 17:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 69)
                     kind = 69;
                  jjCheckNAddTwoStates(10, 11);
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 69)
                     kind = 69;
                  jjCheckNAddTwoStates(10, 11);
                  break;
               case 3:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 17)
                     kind = 17;
                  jjCheckNAddStates(0, 2);
                  break;
               case 2:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 69)
                     kind = 69;
                  jjCheckNAddTwoStates(10, 11);
                  break;
               case 4:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 69)
                     kind = 69;
                  jjCheckNAddTwoStates(10, 11);
                  break;
               case 5:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 69)
                     kind = 69;
                  jjCheckNAddTwoStates(10, 11);
                  break;
               case 6:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 69)
                     kind = 69;
                  jjCheckNAddTwoStates(10, 11);
                  break;
               case 13:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(13, 14);
                  break;
               case 14:
                  if (curChar == 46)
                     jjCheckNAdd(15);
                  break;
               case 15:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 16)
                     kind = 16;
                  jjCheckNAdd(15);
                  break;
               case 16:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 17)
                     kind = 17;
                  jjCheckNAdd(16);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 19:
               case 10:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 69)
                     kind = 69;
                  jjCheckNAddTwoStates(10, 11);
                  break;
               case 18:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 69)
                        kind = 69;
                     jjCheckNAddTwoStates(10, 11);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 69)
                        kind = 69;
                     jjCheckNAdd(9);
                  }
                  if (curChar == 101)
                  {
                     if (kind > 38)
                        kind = 38;
                  }
                  break;
               case 17:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 69)
                        kind = 69;
                     jjCheckNAddTwoStates(10, 11);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 69)
                        kind = 69;
                     jjCheckNAdd(9);
                  }
                  break;
               case 1:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 69)
                        kind = 69;
                     jjCheckNAddTwoStates(10, 11);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 69)
                        kind = 69;
                     jjCheckNAdd(9);
                  }
                  if (curChar == 117)
                     jjCheckNAdd(0);
                  break;
               case 3:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 69)
                        kind = 69;
                     jjCheckNAddStates(3, 5);
                  }
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 6;
                  else if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 2:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 69)
                        kind = 69;
                     jjCheckNAddTwoStates(10, 11);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 69)
                        kind = 69;
                     jjCheckNAdd(9);
                  }
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 4:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 69)
                        kind = 69;
                     jjCheckNAddTwoStates(10, 11);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 69)
                        kind = 69;
                     jjCheckNAdd(9);
                  }
                  if (curChar == 115)
                     jjCheckNAdd(0);
                  break;
               case 5:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 69)
                        kind = 69;
                     jjCheckNAddTwoStates(10, 11);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 69)
                        kind = 69;
                     jjCheckNAdd(9);
                  }
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 6:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 69)
                        kind = 69;
                     jjCheckNAddTwoStates(10, 11);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 69)
                        kind = 69;
                     jjCheckNAdd(9);
                  }
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 0:
                  if (curChar == 101 && kind > 38)
                     kind = 38;
                  break;
               case 7:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 8:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 69)
                     kind = 69;
                  jjCheckNAddStates(3, 5);
                  break;
               case 9:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 69)
                     kind = 69;
                  jjCheckNAdd(9);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 17 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   13, 14, 16, 9, 10, 11, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, "\117\160\145\162\141\164\157\162", 
"\122\141\156\144\157\155\123\145\145\144", "\111\156\151\164\151\141\154\120\157\160\165\154\141\164\151\157\156", 
"\123\157\154\165\164\151\157\156", "\105\170\160\145\143\164\145\144\123\157\154\165\164\151\157\156", 
"\123\160\145\143\151\146\151\143\117\160\145\162\141\164\157\162\126\141\154\165\145\163", "\173", "\175", "\164\162\165\145", "\146\141\154\163\145", "\72", null, null, 
"\160\154\165\163", "\141\144\144", "\155\151\156\165\163", "\73", "\155\165\154\164", 
"\144\151\166", "\160\157\167", "\162\145\164\165\162\156", "\144\157", "\145\156\144", 
"\145\161\165\141\154\163", "\163\165\142\164\162\141\143\164\151\157\156", "\50", "\51", 
"\163\151\172\145", "\151\163\115\141\170\151\155\151\172\141\164\151\157\156", 
"\156\165\155\142\145\162\117\146\107\145\156\145\162\141\164\151\157\156\163", "\101\162\162\141\171", "\123\145\164", "\102\157\157\154\145\141\156", null, 
"\111\156\164\145\147\145\162", "\123\157\154\165\164\151\157\156\124\171\160\145", 
"\154\157\167\145\162\102\157\165\156\144", "\165\160\160\145\162\102\157\165\156\144", 
"\156\165\155\142\145\162\117\146\123\157\154\165\164\151\157\156\163\124\157\123\145\154\145\143\164", 
"\156\165\155\142\145\162\117\146\123\157\154\165\164\151\157\156\163\120\145\162\124\157\165\162\156\155\145\156\164", "\153", "\115\141\170\123\151\172\145", "\146\151\164\156\145\163\163", 
"\111\114\151\156\145\141\162\122\145\160\162\145\163\145\156\164\141\164\151\157\156", "\102\151\164\106\154\151\160\115\165\164\141\164\151\157\156", 
"\105\166\157\154\165\164\151\157\156\141\162\171\101\154\147\157\162\151\164\150\155", 
"\103\145\154\154\165\154\141\162\107\145\156\145\164\151\143\101\154\147\157\162\151\164\150\155", 
"\103\165\164\101\156\144\123\160\154\151\143\145\103\162\157\163\163\157\166\145\162", 
"\104\151\146\146\145\162\145\156\164\151\141\154\105\166\157\154\165\164\151\157\156\101\154\147\157\162\151\164\150\155", 
"\107\141\165\163\163\151\141\156\120\145\162\164\165\162\142\141\164\151\157\156\115\165\164\141\164\151\157\156", "\111\156\164\145\147\145\162\101\144\144\115\165\164\141\164\151\157\156", 
"\123\145\164\123\150\162\151\156\153\115\165\164\141\164\151\157\156", "\123\145\164\107\162\157\167\164\150\115\165\164\141\164\151\157\156", 
"\123\145\164\122\141\156\144\157\155\115\165\164\141\164\151\157\156", 
"\114\151\156\145\141\162\107\145\156\157\155\145\107\162\157\167\115\165\164\141\164\151\157\156", 
"\114\151\156\145\141\162\107\145\156\157\155\145\122\141\156\144\157\155\115\165\164\141\164\151\157\156", 
"\114\151\156\145\141\162\107\145\156\157\155\145\123\150\162\151\156\153\115\165\164\141\164\151\157\156", "\116\123\107\101\111\111\101\154\147\157\162\151\164\150\155", 
"\117\156\145\120\157\151\156\164\103\162\157\163\163\157\166\145\162", "\124\167\157\120\157\151\156\164\103\162\157\163\163\157\166\145\162", 
"\122\157\165\154\145\164\164\145\127\150\145\145\154\123\145\154\145\143\164\151\157\156", "\123\151\155\165\154\141\164\145\144\101\156\156\145\141\154\151\156\147", 
"\123\120\105\101\62\101\154\147\157\162\151\164\150\155", 
"\124\157\165\162\156\141\155\145\156\164\123\145\154\145\143\164\151\157\156", null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0xffffffffffffffe1L, 0x3fL, 
};
static final long[] jjtoSkip = {
   0x1eL, 0x0L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[17];
private final int[] jjstateSet = new int[34];
protected char curChar;
/** Constructor. */
public TestTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public TestTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 17; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
