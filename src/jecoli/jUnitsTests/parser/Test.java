/* Generated By:JavaCC: Do not edit this line. Test.java */
package jecoli.jUnitsTests.parser;

import jecoli.jUnitsTests.BitFlipMutationTest;
import jecoli.jUnitsTests.CellularGeneticAlgorithmTest;
import jecoli.jUnitsTests.CutAndSpliceCrossoverTest;
import jecoli.jUnitsTests.DifferentialEvolutionAlgorithmTest;
import jecoli.jUnitsTests.EvolutionaryAlgorithmTest;
import jecoli.jUnitsTests.GaussianPerturbationMutationTest;
import jecoli.jUnitsTests.ITest;
import jecoli.jUnitsTests.IntegerAddMutationTest;
import jecoli.jUnitsTests.LinearGenomeGrowMutationTest;
import jecoli.jUnitsTests.LinearGenomeRandomMutationTest;
import jecoli.jUnitsTests.LinearGenomeShrinkMutationTest;
import jecoli.jUnitsTests.NSGAIIAlgorithmTest;
import jecoli.jUnitsTests.OnePointCrossoverTest;
import jecoli.jUnitsTests.RouletteWheelSelectionTest;
import jecoli.jUnitsTests.SPEA2AlgorithmTest;
import jecoli.jUnitsTests.SetGrowthMutationTest;
import jecoli.jUnitsTests.SetRandomMutationTest;
import jecoli.jUnitsTests.SetShrinkMutationTest;
import jecoli.jUnitsTests.SimulatedAnnealingTest;
import jecoli.jUnitsTests.TournamentSelectionTest;
import jecoli.jUnitsTests.TwoPointCrossoverTest;

import java.util.ArrayList;
import java.util.TreeSet;

import jecoli.algorithm.components.representation.linear.ILinearRepresentation;
import jecoli.algorithm.components.representation.linear.LinearRepresentation;
import jecoli.algorithm.components.representation.set.SetRepresentation;
import jecoli.algorithm.components.solution.ISolution;
import jecoli.algorithm.components.solution.Solution;

public class Test implements TestConstants {
        public static ITest main(String args[]) throws ParseException {
            Test parser = new Test(System.in);
            try
            {
                return parser.start();
                }
                catch (Exception e) {
                        e.printStackTrace();
                }

                return null;
          }

  final public ITest start() throws ParseException, Exception {
  ITest test;
    test = operator();
          {if (true) return test;}
    throw new Error("Missing return statement in function");
  }

  final public ITest operator() throws ParseException {
  Token t;
  ITest test;
    jj_consume_token(OPERATOR);
    jj_consume_token(HALFCOMMA);
    test = defineOperator();
    test = initialPop(test);
          test.setTestValues();
          {if (true) return test;}
    throw new Error("Missing return statement in function");
  }

  final public ITest defineOperator() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BITFLIPMUTATION:
      jj_consume_token(BITFLIPMUTATION);
                              {if (true) return new BitFlipMutationTest();}
      break;
    case EVOLUTIONARYALGORITHM:
      jj_consume_token(EVOLUTIONARYALGORITHM);
                                    {if (true) return new EvolutionaryAlgorithmTest();}
      break;
    case CELLULARGENETICALGORITHM:
      jj_consume_token(CELLULARGENETICALGORITHM);
                                       {if (true) return new CellularGeneticAlgorithmTest();}
      break;
    case CUTANDSPLICECROSSOVER:
      jj_consume_token(CUTANDSPLICECROSSOVER);
                                    {if (true) return new CutAndSpliceCrossoverTest();}
      break;
    case DIFFERENTIALEVOLUTIONALGORITHM:
      jj_consume_token(DIFFERENTIALEVOLUTIONALGORITHM);
                                             {if (true) return new DifferentialEvolutionAlgorithmTest();}
      break;
    case GAUSSIANPERTURBATIONMUTATION:
      jj_consume_token(GAUSSIANPERTURBATIONMUTATION);
                                           {if (true) return new GaussianPerturbationMutationTest();}
      break;
    case INTEGERADDMUTATION:
      jj_consume_token(INTEGERADDMUTATION);
                                 {if (true) return new IntegerAddMutationTest();}
      break;
    case LINEARGENOMEGROWMUTATION:
      jj_consume_token(LINEARGENOMEGROWMUTATION);
                                       {if (true) return new LinearGenomeGrowMutationTest();}
      break;
    case LINEARGENOMERANDOMMUTATION:
      jj_consume_token(LINEARGENOMERANDOMMUTATION);
                                         {if (true) return new LinearGenomeRandomMutationTest();}
      break;
    case LINEARGENOMESHRINKMUTATION:
      jj_consume_token(LINEARGENOMESHRINKMUTATION);
                                         {if (true) return new LinearGenomeShrinkMutationTest();}
      break;
    case NSGAIIALGORITHM:
      jj_consume_token(NSGAIIALGORITHM);
                              {if (true) return new NSGAIIAlgorithmTest(true);}
      break;
    case ONEPOINTCROSSOVER:
      jj_consume_token(ONEPOINTCROSSOVER);
                                {if (true) return new OnePointCrossoverTest();}
      break;
    case TWOPOINTCROSSOVER:
      jj_consume_token(TWOPOINTCROSSOVER);
                                {if (true) return new TwoPointCrossoverTest();}
      break;
    case ROULETTEWHEELSELECTION:
      jj_consume_token(ROULETTEWHEELSELECTION);
                                     {if (true) return new RouletteWheelSelectionTest();}
      break;
    case SIMULATEDANNEALING:
      jj_consume_token(SIMULATEDANNEALING);
                                 {if (true) return new SimulatedAnnealingTest();}
      break;
    case SPEA2ALGORITHM:
      jj_consume_token(SPEA2ALGORITHM);
                             {if (true) return new SPEA2AlgorithmTest();}
      break;
    case TOURNAMENTSELECTION:
      jj_consume_token(TOURNAMENTSELECTION);
                                  {if (true) return new TournamentSelectionTest();}
      break;
    case SETGROWTHMUTATION:
      jj_consume_token(SETGROWTHMUTATION);
                                {if (true) return new SetGrowthMutationTest();}
      break;
    case SETRANDOMMUTATION:
      jj_consume_token(SETRANDOMMUTATION);
                                {if (true) return new SetRandomMutationTest();}
      break;
    case SETSHRINKMUTATION:
      jj_consume_token(SETSHRINKMUTATION);
                                {if (true) return new SetShrinkMutationTest();}
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public ITest initialPop(ITest test) throws ParseException {
  ITest tests=test;
  ArrayList<ISolution > initialPop;
    jj_consume_token(INITIALPOP);
    jj_consume_token(LBRACKET);
    initialPop = defineSolution();
    jj_consume_token(RBRACKET);
          tests.setInitialPopulation(initialPop);
    tests = expectedSolution(tests);
          {if (true) return tests;}
    throw new Error("Missing return statement in function");
  }

  final public ITest expectedSolution(ITest test) throws ParseException {
  ITest tests = test;
  ArrayList<ISolution > expectedSol;
    jj_consume_token(EXPECTEDSOL);
    jj_consume_token(LBRACKET);
    expectedSol = defineSolution();
    jj_consume_token(RBRACKET);
                tests.setExpectedSolutions(expectedSol);
    tests = specificOperatorValues(tests);
          {if (true) return tests;}
    throw new Error("Missing return statement in function");
  }

  final public ITest specificOperatorValues(ITest test) throws ParseException {
  ITest tests=test;
    jj_consume_token(SPECIFICOPERATORVALUES);
    jj_consume_token(LBRACKET);
    tests = setOperator(tests);
    jj_consume_token(RBRACKET);
          {if (true) return tests;}
    throw new Error("Missing return statement in function");
  }

  final public ITest setOperator(ITest test) throws ParseException {
  ITest tests = test;
          if(tests.getName().equals("BitFlipMutation"))
                tests=setBitFlipMutation(tests);

          if(tests.getName().equals("OnePointCrossover"))
                tests=setOnePointCrossover(tests);

          if(tests.getName().equals("DifferentialEvolutionAlgorithm"))
                tests=setDifferentialEvolutionAlgorithm(tests);

          if(tests.getName().equals("LinearGenomeGrowMutation"))
                tests=setLinearGenomeGrowMutation(tests);

          if(tests.getName().equals("LinearGenomeRandomMutation"))
                tests=setLinearGenomeRandomMutation(tests);

          if(tests.getName().equals("LinearGenomeShrinkMutation"))
                tests=setLinearGenomeShrinkMutation(tests);

          if(tests.getName().equals("IntegerAddMutation"))
                tests=setIntegerAddMutation(tests);

          if(tests.getName().equals("EvolutionaryAlgorithm"))
                tests=setEvolutionaryAlgorithm(tests);

          if(tests.getName().equals("TwoPointCrossover"))
                tests=setTwoPointCrossover(tests);

          if(tests.getName().equals("CutAndSpliceCrossover"))
                tests=setCutAndSpliceCrossover(tests);

          if(tests.getName().equals("GaussianPerturbationMutation"))
                tests=setGaussianPerturbationMutation(tests);

          if(tests.getName().equals("CellularGeneticAlgorithm"))
                tests=setCellularGeneticAlgorithm(tests);

          if(tests.getName().equals("TournamentSeletion"))
                tests=setTournamentSeletion(tests);

          if(tests.getName().equals("RouletteWheelSelection"))
                tests=setRouletteWheelSelection(tests);

          if(tests.getName().equals("SimulatedAnnealing"))
                tests=setSimulatedAnnealing(tests);

          if(tests.getName().equals("SetRandomMutation"))
                tests=setSetRandomMutation(tests);

          if(tests.getName().equals("SetShrinkMutation"))
                tests=setSetShrinkMutation(tests);

          if(tests.getName().equals("SetGrowthMutation"))
                tests=setSetGrowthMutation(tests);

          {if (true) return tests;}
    throw new Error("Missing return statement in function");
  }

  final public ITest setSetGrowthMutation(ITest test) throws ParseException {
  ITest tests = test;
  int maxSize;
  Token t;
    jj_consume_token(MAXSIZE);
    jj_consume_token(HALFCOMMA);
    t = jj_consume_token(DIGIT);
                maxSize = Integer.valueOf(t.image);
        ((SetGrowthMutationTest)tests).setSize(maxSize);
        {if (true) return tests;}
    throw new Error("Missing return statement in function");
  }

  final public ITest setSetShrinkMutation(ITest test) throws ParseException {
  ITest tests = test;
  int maxSize;
  Token t;
    jj_consume_token(MAXSIZE);
    jj_consume_token(HALFCOMMA);
    t = jj_consume_token(DIGIT);
                maxSize = Integer.valueOf(t.image);
        ((SetShrinkMutationTest)tests).setSize(maxSize);
        {if (true) return tests;}
    throw new Error("Missing return statement in function");
  }

  final public ITest setSetRandomMutation(ITest test) throws ParseException {
  ITest tests = test;
  int maxSize;
  Token t;
    jj_consume_token(MAXSIZE);
    jj_consume_token(HALFCOMMA);
    t = jj_consume_token(DIGIT);
                maxSize = Integer.valueOf(t.image);
        ((SetRandomMutationTest)tests).setSize(maxSize);
        {if (true) return tests;}
    throw new Error("Missing return statement in function");
  }

  final public ITest setSimulatedAnnealing(ITest test) throws ParseException {
  ITest tests = test;
  int size;
  boolean isMaximization;
  int numberOfGenerations;
  Token t;
  Object values;
    jj_consume_token(ISMAX);
    jj_consume_token(HALFCOMMA);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
      t = jj_consume_token(TRUE);
      break;
    case FALSE:
      t = jj_consume_token(FALSE);
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    isMaximization = Boolean.valueOf(t.image);
    ((SimulatedAnnealingTest)tests).setIsMaximization(isMaximization);
    jj_consume_token(SIZE);
    jj_consume_token(HALFCOMMA);
    t = jj_consume_token(DIGIT);
    size = Integer.valueOf(t.image);
    ((SimulatedAnnealingTest)tests).setPopulationSize(size);
    jj_consume_token(GENNUM);
    jj_consume_token(HALFCOMMA);
    t = jj_consume_token(DIGIT);
    numberOfGenerations = Integer.valueOf(t.image);
    ((SimulatedAnnealingTest)tests).setNumberOfGenerations(numberOfGenerations);
    {if (true) return tests;}
    throw new Error("Missing return statement in function");
  }

  final public ITest setRouletteWheelSelection(ITest test) throws ParseException {
  ITest tests = test;
  Token t;
  boolean isMaximization;
  int numberOfSolutionsToSelect;
    jj_consume_token(ISMAX);
    jj_consume_token(HALFCOMMA);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
      t = jj_consume_token(TRUE);
      break;
    case FALSE:
      t = jj_consume_token(FALSE);
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        isMaximization = Boolean.valueOf(t.image);
        ((RouletteWheelSelectionTest)tests).setIsMaximization(isMaximization);
    jj_consume_token(NUMBEROFSOLUTIONSTOSELECT);
    jj_consume_token(HALFCOMMA);
    t = jj_consume_token(DIGIT);
          numberOfSolutionsToSelect = Integer.valueOf(t.image);
          ((RouletteWheelSelectionTest)tests).setNumberOfSolutionsToSelect(numberOfSolutionsToSelect);
          {if (true) return tests;}
    throw new Error("Missing return statement in function");
  }

  final public ITest setTournamentSeletion(ITest test) throws ParseException {
  ITest tests = test;
  Token t;
  boolean isMaximization;
  int numberOfSolutionsToSelect;
  int numberOfSolutionsPerTournment;
  int k;
    jj_consume_token(ISMAX);
    jj_consume_token(HALFCOMMA);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
      t = jj_consume_token(TRUE);
      break;
    case FALSE:
      t = jj_consume_token(FALSE);
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        isMaximization = Boolean.valueOf(t.image);
        ((TournamentSelectionTest)tests).setIsMaximization(isMaximization);
    jj_consume_token(NUMBEROFSOLUTIONSTOSELECT);
    jj_consume_token(HALFCOMMA);
    t = jj_consume_token(DIGIT);
          numberOfSolutionsToSelect = Integer.valueOf(t.image);
          ((TournamentSelectionTest)tests).setNumberOfSolutionsToSelect(numberOfSolutionsToSelect);
    jj_consume_token(NUMBEROFSOLUTIONSPERTOURNAMENT);
    jj_consume_token(HALFCOMMA);
    t = jj_consume_token(DIGIT);
          numberOfSolutionsPerTournment = Integer.valueOf(t.image);
          ((TournamentSelectionTest)tests).setNumberOfSolutionsPerTournment(numberOfSolutionsPerTournment);
    jj_consume_token(K);
    jj_consume_token(HALFCOMMA);
    t = jj_consume_token(DIGIT);
          k = Integer.valueOf(t.image);
          ((TournamentSelectionTest)tests).setK(k);
          {if (true) return tests;}
    throw new Error("Missing return statement in function");
  }

  final public ITest setCellularGeneticAlgorithm(ITest test) throws ParseException {
  ITest tests = test;
  int size;
  boolean isMaximization;
  int numberOfGenerations;
  Token t;
  Object values;
    jj_consume_token(ISMAX);
    jj_consume_token(HALFCOMMA);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
      t = jj_consume_token(TRUE);
      break;
    case FALSE:
      t = jj_consume_token(FALSE);
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    isMaximization = Boolean.valueOf(t.image);
    ((CellularGeneticAlgorithmTest)tests).setIsMaximization(isMaximization);
    jj_consume_token(SIZE);
    jj_consume_token(HALFCOMMA);
    t = jj_consume_token(DIGIT);
    size = Integer.valueOf(t.image);
    ((CellularGeneticAlgorithmTest)tests).setPopulationSize(size);
    jj_consume_token(GENNUM);
    jj_consume_token(HALFCOMMA);
    t = jj_consume_token(DIGIT);
    numberOfGenerations = Integer.valueOf(t.image);
    ((CellularGeneticAlgorithmTest)tests).setNumberOfGenerations(numberOfGenerations);
    {if (true) return tests;}
    throw new Error("Missing return statement in function");
  }

  final public ITest setGaussianPerturbationMutation(ITest test) throws ParseException {
  ITest tests = test;
  int size;
  double upperbound;
  double lowerbound;
  Token t;
    jj_consume_token(SIZE);
    jj_consume_token(HALFCOMMA);
    t = jj_consume_token(DIGIT);
         size = Integer.valueOf(t.image);
         ((GaussianPerturbationMutationTest)tests).setSize(size);
    jj_consume_token(UPPERBOUND);
    jj_consume_token(HALFCOMMA);
    t = jj_consume_token(DOUBLE);
         upperbound = Double.valueOf(t.image);
         ((GaussianPerturbationMutationTest)tests).setUpperBound(upperbound);
    jj_consume_token(LOWERBOUND);
    jj_consume_token(HALFCOMMA);
    t = jj_consume_token(DOUBLE);
         lowerbound = Double.valueOf(t.image);
         ((GaussianPerturbationMutationTest)tests).setLowerBound(lowerbound);
          {if (true) return tests;}
    throw new Error("Missing return statement in function");
  }

  final public ITest setCutAndSpliceCrossover(ITest test) throws ParseException {
  ITest tests = test;
  int size;
  Token t;
    jj_consume_token(SIZE);
    jj_consume_token(HALFCOMMA);
    t = jj_consume_token(DIGIT);
                size = Integer.valueOf(t.image);
        ((CutAndSpliceCrossoverTest)tests).setSize(size);
        {if (true) return tests;}
    throw new Error("Missing return statement in function");
  }

  final public ITest setTwoPointCrossover(ITest test) throws ParseException {
  ITest tests = test;
  int size;
  Token t;
    jj_consume_token(SIZE);
    jj_consume_token(HALFCOMMA);
    t = jj_consume_token(DIGIT);
                size = Integer.valueOf(t.image);
        ((TwoPointCrossoverTest)tests).setSize(size);
        {if (true) return tests;}
    throw new Error("Missing return statement in function");
  }

  final public ITest setEvolutionaryAlgorithm(ITest test) throws ParseException {
  ITest tests = test;
  int size;
  boolean isMaximization;
  int numberOfGenerations;
  Token t;
  Object values;
    jj_consume_token(ISMAX);
    jj_consume_token(HALFCOMMA);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
      t = jj_consume_token(TRUE);
      break;
    case FALSE:
      t = jj_consume_token(FALSE);
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    isMaximization = Boolean.valueOf(t.image);
    ((EvolutionaryAlgorithmTest)tests).setIsMaximization(isMaximization);
    jj_consume_token(SIZE);
    jj_consume_token(HALFCOMMA);
    t = jj_consume_token(DIGIT);
    size = Integer.valueOf(t.image);
    ((EvolutionaryAlgorithmTest)tests).setPopulationSize(size);
    jj_consume_token(GENNUM);
    jj_consume_token(HALFCOMMA);
    t = jj_consume_token(DIGIT);
    numberOfGenerations = Integer.valueOf(t.image);
    ((EvolutionaryAlgorithmTest)tests).setNumberOfGenerations(numberOfGenerations);
    {if (true) return tests;}
    throw new Error("Missing return statement in function");
  }

  final public ITest setIntegerAddMutation(ITest test) throws ParseException {
  ITest tests = test;
  int size;
  int upperbound;
  int lowerbound;
  Token t;
    jj_consume_token(SIZE);
    jj_consume_token(HALFCOMMA);
    t = jj_consume_token(DIGIT);
         size = Integer.valueOf(t.image);
         ((IntegerAddMutationTest)tests).setSize(size);
    jj_consume_token(UPPERBOUND);
    jj_consume_token(HALFCOMMA);
    t = jj_consume_token(DIGIT);
         upperbound = Integer.valueOf(t.image);
         ((IntegerAddMutationTest)tests).setUpperBound(upperbound);
    jj_consume_token(LOWERBOUND);
    jj_consume_token(HALFCOMMA);
    t = jj_consume_token(DIGIT);
         lowerbound = Integer.valueOf(t.image);
         ((IntegerAddMutationTest)tests).setLowerBound(lowerbound);
          {if (true) return tests;}
    throw new Error("Missing return statement in function");
  }

  final public ITest setLinearGenomeShrinkMutation(ITest test) throws ParseException {
  ITest tests = test;
  int size;
  int upperbound;
  int lowerbound;
  Token t;
    jj_consume_token(SIZE);
    jj_consume_token(HALFCOMMA);
    t = jj_consume_token(DIGIT);
         size = Integer.valueOf(t.image);
         ((LinearGenomeShrinkMutationTest)tests).setSize(size);
    jj_consume_token(UPPERBOUND);
    jj_consume_token(HALFCOMMA);
    t = jj_consume_token(DIGIT);
         upperbound = Integer.valueOf(t.image);
         ((LinearGenomeShrinkMutationTest)tests).setUpperBound(upperbound);
    jj_consume_token(LOWERBOUND);
    jj_consume_token(HALFCOMMA);
    t = jj_consume_token(DIGIT);
         lowerbound = Integer.valueOf(t.image);
         ((LinearGenomeShrinkMutationTest)tests).setLowerBound(lowerbound);
          {if (true) return tests;}
    throw new Error("Missing return statement in function");
  }

  final public ITest setLinearGenomeRandomMutation(ITest test) throws ParseException {
  ITest tests = test;
  int size;
  int upperbound;
  int lowerbound;
  Token t;
    jj_consume_token(SIZE);
    jj_consume_token(HALFCOMMA);
    t = jj_consume_token(DIGIT);
         size = Integer.valueOf(t.image);
         ((LinearGenomeRandomMutationTest)tests).setSize(size);
    jj_consume_token(UPPERBOUND);
    jj_consume_token(HALFCOMMA);
    t = jj_consume_token(DIGIT);
         upperbound = Integer.valueOf(t.image);
         ((LinearGenomeRandomMutationTest)tests).setUpperBound(upperbound);
    jj_consume_token(LOWERBOUND);
    jj_consume_token(HALFCOMMA);
    t = jj_consume_token(DIGIT);
         lowerbound = Integer.valueOf(t.image);
         ((LinearGenomeRandomMutationTest)tests).setLowerBound(lowerbound);
          {if (true) return tests;}
    throw new Error("Missing return statement in function");
  }

  final public ITest setLinearGenomeGrowMutation(ITest test) throws ParseException {
  ITest tests = test;
  int size;
  int upperbound;
  int lowerbound;
  Token t;
    jj_consume_token(SIZE);
    jj_consume_token(HALFCOMMA);
    t = jj_consume_token(DIGIT);
         size = Integer.valueOf(t.image);
         ((LinearGenomeGrowMutationTest)tests).setSize(size);
    jj_consume_token(UPPERBOUND);
    jj_consume_token(HALFCOMMA);
    t = jj_consume_token(DIGIT);
         upperbound = Integer.valueOf(t.image);
         ((LinearGenomeGrowMutationTest)tests).setUpperBound(upperbound);
    jj_consume_token(LOWERBOUND);
    jj_consume_token(HALFCOMMA);
    t = jj_consume_token(DIGIT);
         lowerbound = Integer.valueOf(t.image);
         ((LinearGenomeGrowMutationTest)tests).setLowerBound(lowerbound);
          {if (true) return tests;}
    throw new Error("Missing return statement in function");
  }

  final public ITest setDifferentialEvolutionAlgorithm(ITest test) throws ParseException {
  ITest tests = test;
  int size;
  int numberOfGenerations;
  Token t;
  Object values;
    jj_consume_token(SIZE);
    jj_consume_token(HALFCOMMA);
    t = jj_consume_token(DIGIT);
    size = Integer.valueOf(t.image);
    ((DifferentialEvolutionAlgorithmTest)tests).setPopulationSize(size);
    jj_consume_token(GENNUM);
    jj_consume_token(HALFCOMMA);
    t = jj_consume_token(DIGIT);
    numberOfGenerations = Integer.valueOf(t.image);
    ((DifferentialEvolutionAlgorithmTest)tests).setNumberOfGenerations(numberOfGenerations);
    {if (true) return tests;}
    throw new Error("Missing return statement in function");
  }

  final public ITest setOnePointCrossover(ITest test) throws ParseException {
  ITest tests = test;
  int size;
  Token t;
    jj_consume_token(SIZE);
    jj_consume_token(HALFCOMMA);
    t = jj_consume_token(DIGIT);
                size = Integer.valueOf(t.image);
        ((OnePointCrossoverTest)tests).setSize(size);
        {if (true) return tests;}
    throw new Error("Missing return statement in function");
  }

  final public ITest setBitFlipMutation(ITest test) throws ParseException {
  ITest tests = test;
  int size;
  Token t;
    jj_consume_token(SIZE);
    jj_consume_token(HALFCOMMA);
    t = jj_consume_token(DIGIT);
                size = Integer.valueOf(t.image);
        ((BitFlipMutationTest)tests).setSize(size);
        {if (true) return tests;}
    throw new Error("Missing return statement in function");
  }

  final public ArrayList<ISolution > defineSolution() throws ParseException {
  ArrayList<ISolution > solutions = new ArrayList<ISolution >();
  ISolution s;
    label_1:
    while (true) {
      jj_consume_token(SOLUTION);
      jj_consume_token(LBRACKET);
      s = representation();
      s = setSolutionFitness(s);
                                                                            solutions.add(s);
      jj_consume_token(RBRACKET);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SOLUTION:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_1;
      }
    }
          {if (true) return solutions;}
    throw new Error("Missing return statement in function");
  }

  final public ISolution setSolutionFitness(ISolution solution) throws ParseException {
  Token t;
  ISolution s = solution;
  double fitness;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FITNESS:
      jj_consume_token(FITNESS);
      jj_consume_token(HALFCOMMA);
      t = jj_consume_token(DOUBLE);
    fitness = Double.valueOf(t.image);
     s.setFitnessValue(fitness);
      break;
    default:
      jj_la1[7] = jj_gen;
      ;
    }
    {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  final public ISolution representation() throws ParseException {
ISolution sol;
    sol = representationDefinition();
          {if (true) return sol;}
    throw new Error("Missing return statement in function");
  }

  final public ISolution representationDefinition() throws ParseException {
Token t;
//ILinearRepresentation<Object> genome = new LinearRepresentation<Object>();
Object gen;
int position;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ARRAY:
      jj_consume_token(ARRAY);
      jj_consume_token(LPAR);
      gen = terms();
                ILinearRepresentation<Object > genome1 = new LinearRepresentation<Object >();
                position = genome1.getNumberOfElements();
                genome1.addElementAt(position,gen);
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SEMICOMMA:
          ;
          break;
        default:
          jj_la1[8] = jj_gen;
          break label_2;
        }
        jj_consume_token(SEMICOMMA);
        gen = terms();
                position = genome1.getNumberOfElements();
                genome1.addElementAt(position,gen);
      }
      jj_consume_token(RPAR);
          {if (true) return new Solution(genome1);}
      break;
    case SET:
      jj_consume_token(SET);
      jj_consume_token(LPAR);
      gen = terms();
                TreeSet<Integer> setElements = new TreeSet<Integer>();
                setElements.add(((Integer)gen));
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SEMICOMMA:
          ;
          break;
        default:
          jj_la1[9] = jj_gen;
          break label_3;
        }
        jj_consume_token(SEMICOMMA);
        gen = terms();
                setElements.add(((Integer)gen));
      }
      jj_consume_token(RPAR);
          {if (true) return new Solution(new SetRepresentation(setElements));}
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public void treeNodes() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ADD:
      jj_consume_token(ADD);
      jj_consume_token(LPAR);
      representationDefinition();
      jj_consume_token(RPAR);
      jj_consume_token(LPAR);
      representationDefinition();
      jj_consume_token(RPAR);
      jj_consume_token(RPAR);

      break;
    case MULT:
      jj_consume_token(MULT);
      jj_consume_token(LPAR);
      representationDefinition();
      jj_consume_token(RPAR);
      jj_consume_token(LPAR);
      representationDefinition();
      jj_consume_token(RPAR);
      jj_consume_token(RPAR);

      break;
    case DIV:
      jj_consume_token(DIV);
      jj_consume_token(LPAR);
      representationDefinition();
      jj_consume_token(RPAR);
      jj_consume_token(LPAR);
      representationDefinition();
      jj_consume_token(RPAR);
      jj_consume_token(RPAR);

      break;
    case POW:
      jj_consume_token(POW);
      jj_consume_token(LPAR);
      representationDefinition();
      jj_consume_token(RPAR);
      jj_consume_token(LPAR);
      representationDefinition();
      jj_consume_token(RPAR);
      jj_consume_token(RPAR);

      break;
    case SUBTRACTION:
      jj_consume_token(SUBTRACTION);
      jj_consume_token(LPAR);
      representationDefinition();
      jj_consume_token(RPAR);
      jj_consume_token(LPAR);
      representationDefinition();
      jj_consume_token(RPAR);
      jj_consume_token(RPAR);

      break;
    case TRUE:
    case FALSE:
    case DOUBLE:
    case DIGIT:
    case MINUS:
    case STRING:
      terms();

      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public Object terms() throws ParseException {
Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MINUS:
      jj_consume_token(MINUS);
      jj_consume_token(DIGIT);
                     {if (true) return null;}
      break;
    case TRUE:
      t = jj_consume_token(TRUE);
                boolean btrue = Boolean.valueOf(t.image);
                {if (true) return btrue;}
      break;
    case FALSE:
      t = jj_consume_token(FALSE);
          boolean bfalse = Boolean.valueOf(t.image);
          {if (true) return bfalse;}
      break;
    case STRING:
      t = jj_consume_token(STRING);
          {if (true) return t.image;}
      break;
    case DOUBLE:
      t = jj_consume_token(DOUBLE);
          {if (true) return Double.valueOf(t.image);}
      break;
    case DIGIT:
      t = jj_consume_token(DIGIT);
          {if (true) return Integer.valueOf(t.image);}
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public TestTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[13];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x6000,0x6000,0x6000,0x6000,0x6000,0x100,0x0,0x200000,0x200000,0x0,0x21db6000,0x136000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0xfffe0000,0x0,0x0,0x0,0x0,0x0,0x0,0x8000,0x0,0x0,0x18,0x0,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x1f,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20,0x20,};
   }

  /** Constructor with InputStream. */
  public Test(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Test(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new TestTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Test(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new TestTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Test(TestTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(TestTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[70];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 13; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 70; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
